#version 460 core

#define PI 3.1415926538
#define SIZE 8


void horizontalifft();
void reverse_bit(in int number, in int number1, in int addition, out int reversed_number);

layout(local_size_x = SIZE, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 0) buffer inputSSBO {
    vec2 inputData[];
};

layout (std430, binding = 1) buffer outputSSBO {
    vec2 outputData[];
};

void main()
{
    horizontalifft();
}

// Used the following code from https://www.geeksforgeeks.org/discrete-fourier-transform-and-its-inverse-using-c/
void horizontalifft()
{

    vec2 intermediate[SIZE];

    for (int n = 0; n < SIZE; n++)
    {
        intermediate[n] = vec2(0.0f, 0.0f);
        for (int k = 0; k < SIZE; k++)
        {
            float theta = (2 * PI * k * n) / SIZE;
            intermediate[n].x = intermediate[n].x + inputData[gl_LocalInvocationID.x * SIZE + k].x * cos(theta);
            intermediate[n].y = intermediate[n].y + inputData[gl_LocalInvocationID.x * SIZE + k].y * sin(theta);
        }
        outputData[gl_LocalInvocationID.x * SIZE + n] = intermediate[n] / SIZE;
    }
}