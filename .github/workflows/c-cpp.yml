on:
  pull_request:
    types:
      - opened
      - edited
      - closed
      - reopened
      - synchronize
    branches:
      - main

jobs:
  build-linux:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwayland-dev \
            libxkbcommon-x11-dev \
            xorg-dev \
            mesa-utils \
            libglu1-mesa-dev \
            freeglut3-dev \
            mesa-common-dev
      - name: Build application
        run: |
          cmake -G  "Unix Makefiles"
          make
          mkdir release-github
          cp --recursive run.sh WaveSim resources release-github
          zip -r release.zip "release-github"
  merge_job-linux:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwayland-dev \
            libxkbcommon-x11-dev \
            xorg-dev \
            mesa-utils \
            libglu1-mesa-dev \
            freeglut3-dev \
            mesa-common-dev
      - name: Build application
        run: |
          cmake -G  "Unix Makefiles"
          make
          mkdir release-github
          cp --recursive run.sh WaveSim resources release-github
          zip -r release.zip "release-github"

      - name: Create Release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.0.0-ubuntu  # Specify your desired tag here
          release_name: v0.0.0-ubuntu  # Specify your desired release name here

      - name: Upload Executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: v0.0.0-ubuntu.zip  # Specify your desired asset name here
          asset_content_type: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}
  build-windows:
    if: github.event.pull_request.merged == false
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Configure CMake
        run: cmake -G "Visual Studio 17 2022"
      
      - name: Build
        run: cmake --build . --config Release
  merge_job-windows:
    if: github.event.pull_request.merged == true
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Configure CMake
        run: cmake -G "Visual Studio 17 2022"
      
      - name: Build
        run: cmake --build . --config Release  

      - name: Make Release
        run: |
          mkdir release-github
          copy Release\WaveSim.exe release-github\WaveSim.exe
          xcopy resources release-github\resources /s /i
          powershell Compress-Archive -Path .\release-github\* -DestinationPath release.zip
      - name: Create Release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.0.0-windows  # Specify your desired tag here
          release_name: v0.0.0-windows  # Specify your desired release name here

      - name: Upload Executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: v0.0.0-windows.zip  # Specify your desired asset name here
          asset_content_type: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}